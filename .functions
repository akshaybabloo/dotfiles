#!/bin/bash

function _whereami() {
    if [[ $0 == -* ]]; then
        if [[ $SHELL == */zsh ]]; then
            script_dir=$(dirname "$ZSH_ARGZERO")
        elif [[ $SHELL == */bash ]]; then
            script_dir=$(dirname "${BASH_SOURCE[0]}")
        else
            echo "Unsupported shell: $SHELL"
            exit 1
        fi
    else
        script_dir=$(dirname "${BASH_SOURCE[0]}")
    fi

    echo $script_dir
}

function _loading() {
    local pid=$1
    local message=$2
    local sp="/-\|"  # Spinner characters
    
    # Save cursor state and hide it
    tput civis

    # Handle completion message
    if [[ $1 == "--done" ]]; then
        echo -e "\n$2"
        tput cnorm  # Restore cursor
        return 0
    fi

    # Validate PID
    if ! [[ "$pid" =~ ^[0-9]+$ ]] || [ ! -d "/proc/$pid" ]; then
        echo "Error: Invalid process ID"
        tput cnorm  # Restore cursor
        return 1
    fi

    # Start the Spinner
    echo -n "$message "
    while [ -d "/proc/$pid" ]; do
        for i in $(seq 0 $((${#sp} - 1))); do
            printf "\b${sp:$i:1}"
            sleep 0.1
            # Check if process ended
            [ ! -d "/proc/$pid" ] && break 2
        done
    done

    # Clean up the output
    wait "$pid"
    local exit_status=$?
    
    if [ $exit_status -eq 0 ]; then
        echo -e "\b\b Done!"
    else
        echo -e "\b\b Failed!"
    fi
    
    # Restore cursor
    tput cnorm
    return $exit_status
}

function _requireSuperuser() {
    local file=$1
    local operation=${2:-write}  # Default to write operation

    # Check if file/directory exists
    if [[ ! -e "$file" ]]; then
        # For non-existent files, check parent directory
        local parent_dir=$(dirname "$file")
        if [[ ! -w "$parent_dir" ]]; then
            return 1  # Need sudo to create file in this directory
        fi
        return 0
    fi

    # Check based on operation type
    case "$operation" in
        read)
            if [[ -r "$file" ]]; then
                return 0  # Can read, no sudo needed
            fi
            ;;
        write|edit|delete)
            if [[ -w "$file" ]]; then
                return 0  # Can write, no sudo needed
            fi
            ;;
        *)
            echoerr "Error: Unknown operation '$operation'"
            return 2
            ;;
    esac

    # If we reach here, we don't have the required permission
    return 1  # Need sudo
}

function _redText() { printf "\e[1m\e[31m%s\e[0m\n" "$1"; }
function _greenText() { printf "\e[1m\e[32m%s\e[0m\n" "$1"; }
function _blueText() { printf "\e[1m\e[94m%s\e[0m\n" "$1"; }


## h2: General Functions

## `sudo_if_needed` checks if the file requires superuser permissions and returns `sudo` if needed
## Usage: `sudo_if_needed <file>`
function sudo_if_needed() {
    local file=$1
    local operation=${2:-write}

    if _requireSuperuser "$file" "$operation"; then
        echo ""
    else
        echo "sudo"
    fi
}

## `die` echoes the first argument as an error message and exits the shell
## Usage: `die "Error: Something went wrong."`
function die() { echoerr $@ ; exit 1; }

## Create a new directory and enter it
## Usage: `mkd <dirname>`
function mkd() {
	mkdir -p "$@" && cd "$_"
}

## Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
## Usage: `Usage: targz [--name custom_name] <path to file or directory>...`
function targz() {
    local outputName="compressed_files"
    local files=()

    # Parse arguments
    for arg in "$@"; do
        case "$arg" in
            --name)
                outputNameSet=true
                ;;
            *)
                if [[ "$outputNameSet" == true ]]; then
                    outputName="$arg"
                    outputNameSet=false
                else
                    files+=("$arg")
                fi
                ;;
        esac
    done

    # Check if any files were provided
    if [ ${#files[@]} -eq 0 ]; then
        echo "Usage: targz [--name custom_name] <path to file or directory>..."
        return 1
    fi

    # Check for existing compressed file and increment name if exists
    local tmpFile="${outputName}.tar"
    local counter=0
    while [ -f "${tmpFile}.gz" ]; do
        let counter++
        tmpFile="${outputName}${counter}.tar"
    done

    # Create tar file
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${files[@]}" || return 1

    # Determine compression command
    local cmd=""
    local size=$(stat -c"%s" "${tmpFile}" 2>/dev/null || stat -f"%z" "${tmpFile}" 2>/dev/null)
    if ((size < 52428800)) && command -v zopfli >/dev/null; then
        cmd="zopfli"
    else
        if command -v pigz >/dev/null; then
            cmd="pigz"
        else
            cmd="gzip"
        fi
    fi

    echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…"
    "${cmd}" -v "${tmpFile}" || return 1
    [ -f "${tmpFile}" ] && rm "${tmpFile}"

    local zippedSize=$(stat -c"%s" "${tmpFile}.gz" 2>/dev/null || stat -f"%z" "${tmpFile}.gz" 2>/dev/null)
    echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully."
}

## ::: danger Requirements
## This function requires Python 3.10 or higher.
## :::
## ::: info Optional Requirements
## You can also use Caddy serve, install it from https://caddyserver.com/docs/install
## :::
## > If a caddy server is installed then that is preferred over Python.
##
## Start an HTTP server from a directory, optionally specifying the port
## Usage: `server [path] [port]`
function server() {
    local path="${1:-.}"
    local port="${2:-8000}"
    
    sleep 1 && open "http://localhost:${port}/" &

    # Check if Caddy server is installed
    if command -v caddy &> /dev/null; then
        echo "Starting server at http://localhost:${port}/"
        caddy file-server --browse --listen :$port --root $path
    else
        # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
        # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
        python3 -c $'import http.server;\nclass MyHandler(http.server.SimpleHTTPRequestHandler):\n\tdef guess_type(self, path):\n\t\text = super().guess_type(path);\n\t\tif ext == "application/octet-stream":\n\t\t\text = "text/plain";\n\t\treturn ext + ";charset=UTF-8";\n\nhttp.server.test(HandlerClass=MyHandler, port=int('$port'))'
    fi
}

## Normalize `open` across Linux, macOS, and Windows.
## This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe'
	else
		alias open='xdg-open'
	fi
fi

## `o` with no arguments opens the current directory, otherwise opens the given
## location
## Usage: `o`, `o .`, `o ~/`, `o ./myproject`, etc.
function o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}

## ::: danger Requirements
## This function requires `tree` - `sudo apt install tree`.
## :::
## `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
## the `.git` directory, listing directories first. The output gets piped into
## `less` with options to preserve color and line numbers, unless the output is
## small enough for one screen.
## Usage: `tre <directory>`
function tre() {
	# Check if tree is installed
	if ! command -v tree &>/dev/null; then
		echoerr "Error: tree is not installed. Please install it from - sudo apt install tree"
		return
	fi

	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

## ::: danger Requirements
## This function requires `git` - `sudo apt install git`.
## :::
## `ginit` initailises a git repository and makes an initial commit
## Usage: `ginit` or `ginit "Initial commit"`
function ginit() {
	# Check if git is installed
	if ! command -v git &>/dev/null; then
		echoerr "Error: git not found. Please install git from https://git-scm.com/downloads"
		return
	fi

	local commit_message="${1:-Initial commit}"
	git init && git add . && git commit -m "$commit_message"
}

## `echoerr` echoes the first argument to stderr. Useful for printing errors.
## Usage: `echoerr "Error: Something went wrong."`
function echoerr() { _redText "$*" >&2; }

## `dlc` deletes all lines that start with the specified comment symbol
## Usage: `dlc "<file>" "<comment_symbol>"`
function dlc() {
	local file=$1
	local comment_symbol=$2
	local temp_file="${file}.tmp"

	# Check if the file exists, if not display an error message and return
	if [[ ! -f $file ]]; then
		echoerr "Error: $file not found."
		return
	fi

	# Remove inline comments and full-line comments while preserving necessary newlines
	awk -v symbol="$comment_symbol" '
    {
        line = $0
        if (line ~ "^[[:space:]]*" symbol ".*$") {
            if (prev_line !~ "^[[:space:]]*" symbol ".*$") {
                print ""
            }
        } else {
            sub("[[:space:]]*" symbol ".*", "", line)
            if (length(line) > 0) {
                print line
            } else if (prev_line !~ "^[[:space:]]*" symbol ".*$") {
                print ""
            }
        }
        prev_line = $0
    }
    ' "$file" >"$temp_file"

	# Replace the original file with the temporary file
	mv "$temp_file" "$file"
}

## Converts all file names in the current directory to some UUID names leaving the extension intact
## Usage: `uuidf`
function uuidf() {
    # Loop over all files in the current directory
    for file in *; do
        # Skip if it's a directory
        if [[ -d "$file" ]]; then
            continue
        fi

        # Extract the file extension
        extension="${file##*.}"

        # Generate a GUID
        guid=$(uuidgen)

        # Rename the file, keeping the original extension
        mv "$file" "${guid}.${extension}"
    done

}

## `snapc` cleans up old snap versions
## Usage: `sudo snapc`
function snapc() {
    # Check if snap is installed
    if ! command -v snap &> /dev/null; then
        echoerr "Error: snap not found. Please install snap from https://snapcraft.io/docs/installing-snapd"
        return
    fi

    # Check if sudo is used
    if [[ $EUID -ne 0 ]]; then
        echoerr "Error: Please run as root"
        return
    fi

    # Taken from - https://www.debugpoint.com/clean-up-snap/
    # Remove old revisions of snaps
    # CLOSE ALL SNAPS BEFORE RUNNING THIS
    set -eu

    snap list --all | awk '/disabled/{print $1, $3}' |
        while read snapname revision; do
            snap remove "$snapname" --revision="$revision"
        done
}

## `debi` installs a .deb file using `apt install`
## Usage: `debi <file.deb>`
function debi() {
    # Check if the first argument is not empty
    if [[ -z $1 ]]; then
        echoerr "Error: No arguments provided."
        return
    fi

    # Check if the first argument is a valid file
    if [[ ! -f $1 ]]; then
        echoerr "Error: $1 is not a valid file."
        return
    fi

    # Move file to /tmp
    local tmp_file="/tmp/$(basename "$1")"
    mv "$1" "$tmp_file"

    # Install the deb using sudo apt install
    sudo apt install -y "$tmp_file"
}

## `lsu` lists all USB devices connected to the system
## Usage: `lsu`
function lsu() {
    for sysdevpath in $(find /sys/bus/usb/devices/usb*/ -name dev); do
        (
            syspath="${sysdevpath%/dev}"
            devname="$(udevadm info -q name -p $syspath)"
            [[ "$devname" == "bus/"* ]] && exit
            eval "$(udevadm info -q property --export -p $syspath)"
            [[ -z "$ID_SERIAL" ]] && exit
            echo "/dev/$devname - $ID_SERIAL"
        )
    done
}

## h2: File and Directory Compression Functions

## ::: danger Requirements
## This function requires `shred` - `sudo apt install coreutils`.
## :::
## `sd` securely deletes a file or directory by overwriting it before deletion
## Usage: `sd <file or directory> [-f]`
function sd() {
    local target=""
    local force=false

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--force)
                force=true
                shift
                ;;
            *)
                if [[ -z $target ]]; then
                    target=$1
                else
                    echoerr "Error: Multiple targets not supported"
                    return 1
                fi
                shift
                ;;
        esac
    done

    # Check if target is provided
    if [[ -z $target ]]; then
        echoerr "Error: No target specified."
        echoerr "Usage: sd <file or directory> [-f]"
        return 1
    fi

    # Check if shred is installed
    if ! command -v shred &> /dev/null; then
        echoerr "Error: shred not found. Please install it: sudo apt install coreutils"
        return 1
    fi

    # Check if the file or directory exists
    if [[ ! -e $target ]]; then
        echoerr "Error: '$target' not found."
        return 1
    fi

    # Handle symlinks - don't follow them
    if [[ -L $target ]]; then
        echoerr "Error: '$target' is a symbolic link. Remove it with 'rm' instead."
        echoerr "Hint: Use 'rm $target' to remove the link, or 'sd \$(readlink -f $target)' to shred the target."
        return 1
    fi

    local sudo_cmd
    sudo_cmd=$(sudo_if_needed "$target")

    # Confirmation prompt (unless -f flag is used)
    if [[ "$force" == false ]]; then
        local item_type="file"
        [[ -d $target ]] && item_type="directory"
        
        echo "WARNING: You are about to securely delete $item_type: $target"
        echo "This operation is IRREVERSIBLE and will overwrite the data 3 times."
        read -p "Are you sure? (yes/no): " confirmation
        
        if [[ "$confirmation" != "yes" ]]; then
            echo "Operation cancelled."
            return 0
        fi
    fi

    # If it's a directory, use find to securely delete all files within it
    if [[ -d $target ]]; then
        echo "Securely deleting files in directory: $target"
        
        # Count files for progress indication
        local file_count
        file_count=$(find "$target" -type f | wc -l)
        
        if [[ $file_count -eq 0 ]]; then
            echo "No files to shred in directory."
        else
            echo "Shredding $file_count file(s) with 3 overwrite passes..."
            
            # Shred all files: -n 3 (3 passes), -v (verbose), -z (zero), -u (remove)
            $sudo_cmd find "$target" -type f -exec shred -n 3 -vzu {} \;
            local exit_code=$?
            
            if [[ $exit_code -ne 0 ]]; then
                echoerr "Error: Failed to shred some files (exit code $exit_code)"
                return $exit_code
            fi
        fi
        
        # Remove the empty directory structure
        echo "Removing directory structure..."
        $sudo_cmd rm -rf "$target"
        
        if [[ $? -eq 0 ]]; then
            echo "Successfully deleted: $target"
        else
            echoerr "Error: Failed to remove directory"
            return 1
        fi
    else
        # If it's a file, securely delete it directly
        echo "Securely deleting file: $target"
        $sudo_cmd shred -n 3 -vzu "$target"
        local exit_code=$?
        
        if [[ $exit_code -eq 0 ]]; then
            echo "Successfully deleted: $target"
        else
            echoerr "Error: Failed to shred file (exit code $exit_code)"
            return $exit_code
        fi
    fi
    
    return 0
}

## ::: danger Requirements
## This function requires `7zzs`, see https://www.7-zip.org/download.html
## :::
## `7zc` creates a 7Zip archive using the LZMA2 algorithm
## Usage: `7zc <directory> [-p]` or `7zc <file1> <file2> ... <archive_name> [-p]`
function 7zc() {
    # Check if 7zzs is installed
    if ! command -v 7zzs &> /dev/null; then
        echoerr "Error: 7zzs not found. Please install 7zzs from https://www.7-zip.org/download.html"
        return 1
    fi

    # Check if arguments are provided
    if [[ -z $1 ]]; then
        echoerr "Error: No arguments provided."
        echoerr "Usage: 7zc <directory> [-p] OR 7zc <file1> <file2> ... <archive_name> [-p]"
        return 1
    fi

    # Check for -p flag
    local use_password=false
    local password=""
    if [[ "${@: -1}" == "-p" ]]; then
        use_password=true
        set -- "${@:1:$#-1}"  # Remove -p from arguments
        
        # Prompt for password
        read -s -p "Enter password: " password
        echo  # New line after password input
        
        if [[ -z "$password" ]]; then
            echoerr "Error: Password cannot be empty"
            return 1
        fi
        
        read -s -p "Confirm password: " password_confirm
        echo  # New line after confirmation
        
        if [[ "$password" != "$password_confirm" ]]; then
            echoerr "Error: Passwords do not match"
            return 1
        fi
    fi

    # Single directory mode: if only one argument and it's a directory
    if [[ $# -eq 1 && -d $1 ]]; then
        local dir_name=$(basename "${1%/}")
        local archive_name="${dir_name}.7z"
        
        # Check for existing archive
        if [[ -f "$archive_name" ]]; then
            echoerr "Error: $archive_name already exists"
            return 1
        fi
        
        echo "Compressing directory '$1' to '$archive_name'..."
        if [[ "$use_password" == true ]]; then
            7zzs a -t7z -m0=lzma2 -mx9 -mfb=64 -md=32m -ms=on -mhe=on -p"$password" "$archive_name" "$1"
        else
            7zzs a -t7z -m0=lzma2 -mx9 -mfb=64 -md=32m -ms=on "$archive_name" "$1"
        fi
        return $?
    fi

    # Multiple files/directories mode
    if [[ $# -lt 2 ]]; then
        echoerr "Error: Please provide files/directories and an archive name."
        echoerr "Usage: 7zc <file1> <file2> ... <archive_name> [-p]"
        return 1
    fi

    # Get archive name (last argument) and strip .7z if provided
    local archive_name="${@: -1}"
    archive_name="${archive_name%.7z}.7z"
    
    # Check for existing archive
    if [[ -f "$archive_name" ]]; then
        echoerr "Error: $archive_name already exists"
        return 1
    fi
    
    # Get all items (all arguments except the last one)
    local items=("${@:1:$#-1}")
    
    # Verify all source items exist
    for item in "${items[@]}"; do
        if [[ ! -e "$item" ]]; then
            echoerr "Error: File or directory '$item' does not exist"
            return 1
        fi
    done
    
    echo "Compressing ${#items[@]} item(s) to '$archive_name'..."
    # Using maximum compression: LZMA2, ultra (-mx9), 64 word size, 32MB dictionary, solid archive
    if [[ "$use_password" == true ]]; then
        7zzs a -t7z -m0=lzma2 -mx9 -mfb=64 -md=32m -ms=on -mhe=on -p"$password" "$archive_name" "${items[@]}"
    else
        7zzs a -t7z -m0=lzma2 -mx9 -mfb=64 -md=32m -ms=on "$archive_name" "${items[@]}"
    fi
    return $?
}

## ::: danger Requirements
## This function requires `7zzs`, see https://www.7-zip.org/download.html
## :::
## `7zx` extracts a 7Zip archive to a directory with the same name as the archive.
## Supported formats: `zip`, `rar`, `7z`, `tar`, `tar.gz`, `tgz`, `tar.bz2`, `tbz2`, `tar.xz`, `txz`, `gz`, `bz2`, `xz`
## Usage: `7zx <filename>.7z`
function 7zx() {
    # Check if 7zzs is installed
    if ! command -v 7zzs &> /dev/null; then
        echoerr "Error: 7zzs not found. Please install 7zzs from https://www.7-zip.org/download.html"
        return 1
    fi

    # Check if argument is provided
    if [[ -z $1 ]]; then
        echoerr "Error: No archive file specified."
        echoerr "Usage: 7zx <archive_file>"
        return 1
    fi

    local file_name="$1"

    # Check if file exists
    if [[ ! -f "$file_name" ]]; then
        echoerr "Error: File '$file_name' not found"
        return 1
    fi

    local extension="${file_name##*.}"
    local dir_name
    local base_name=$(basename "$file_name")

    # Determine the directory name based on the file extension
    case "$extension" in
        zip)
            dir_name="${base_name%.zip}"
            ;;
        rar)
            # Handle multi-part rar: file.part1.rar, file.part2.rar, etc.
            if [[ "$base_name" =~ \.part[0-9]+\.rar$ ]]; then
                dir_name="${base_name%.part*.rar}"
            else
                dir_name="${base_name%.rar}"
            fi
            ;;
        7z)
            # Handle multi-part 7z: file.part1.7z, file.part2.7z, etc.
            if [[ "$base_name" =~ \.part[0-9]+\.7z$ ]]; then
                dir_name="${base_name%.part*.7z}"
            else
                dir_name="${base_name%.7z}"
            fi
            ;;
        tar)
            dir_name="${base_name%.tar}"
            ;;
        gz)
            if [[ "$base_name" =~ \.tar\.gz$ ]] || [[ "$base_name" =~ \.tgz$ ]]; then
                dir_name="${base_name%.tar.gz}"
                dir_name="${dir_name%.tgz}"
            else
                dir_name="${base_name%.gz}"
            fi
            ;;
        bz2)
            if [[ "$base_name" =~ \.tar\.bz2$ ]] || [[ "$base_name" =~ \.tbz2$ ]]; then
                dir_name="${base_name%.tar.bz2}"
                dir_name="${dir_name%.tbz2}"
            else
                dir_name="${base_name%.bz2}"
            fi
            ;;
        xz)
            if [[ "$base_name" =~ \.tar\.xz$ ]] || [[ "$base_name" =~ \.txz$ ]]; then
                dir_name="${base_name%.tar.xz}"
                dir_name="${dir_name%.txz}"
            else
                dir_name="${base_name%.xz}"
            fi
            ;;
        tgz)
            dir_name="${base_name%.tgz}"
            ;;
        tbz2)
            dir_name="${base_name%.tbz2}"
            ;;
        txz)
            dir_name="${base_name%.txz}"
            ;;
        *)
            echoerr "Error: Unsupported file extension: $extension"
            echoerr "Supported formats: zip, rar, 7z, tar, tar.gz, tgz, tar.bz2, tbz2, tar.xz, txz, gz, bz2, xz"
            return 1
            ;;
    esac

    # Check if directory already exists
    if [[ -d "$dir_name" ]]; then
        echoerr "Error: Directory '$dir_name' already exists"
        return 1
    fi

    mkdir -p "$dir_name"
    
    echo "Extracting '$file_name' to '$dir_name/'..."
    
    # Try to list archive without password to check if it's encrypted
    # Suppress only stderr to hide "Wrong password" errors during detection
    7zzs l "$file_name" -p- >/dev/null 2>&1
    local exit_code=$?
    
    # If listing failed due to password (exit code 2), prompt for password
    if [[ $exit_code -eq 2 ]]; then
        echo "Archive is password protected."
        local password
        local max_attempts=3
        local attempt=1
        
        while [[ $attempt -le $max_attempts ]]; do
            read -s -p "Enter password (attempt $attempt/$max_attempts): " password
            echo
            
            if [[ -z "$password" ]]; then
                echoerr "Error: Password cannot be empty"
                ((attempt++))
                continue
            fi
            
            # Try extraction with password (show progress)
            7zzs x "$file_name" -o"$dir_name" -p"$password"
            exit_code=$?
            
            if [[ $exit_code -eq 0 ]]; then
                echo "Extraction complete!"
                return 0
            elif [[ $exit_code -eq 2 ]]; then
                echoerr "Error: Incorrect password"
                ((attempt++))
            else
                echoerr "Error: Extraction failed with exit code $exit_code"
                rmdir "$dir_name" 2>/dev/null
                return $exit_code
            fi
        done
        
        echoerr "Error: Maximum password attempts exceeded"
        rmdir "$dir_name" 2>/dev/null
        return 1
    elif [[ $exit_code -ne 0 ]]; then
        echoerr "Error: Cannot read archive (exit code $exit_code)"
        rmdir "$dir_name" 2>/dev/null
        return $exit_code
    fi
    
    # Extract without password (show progress)
    7zzs x "$file_name" -o"$dir_name"
    exit_code=$?
    
    if [[ $exit_code -ne 0 ]]; then
        echoerr "Error: Extraction failed with exit code $exit_code"
        rmdir "$dir_name" 2>/dev/null
        return $exit_code
    fi
    
    echo "Extraction complete!"
    return 0
}

## ::: danger Requirements
## This function requires `zstd`. Install it from `sudo apt install zstd`.
## :::
## `zstdc` compresses a file or directory using zstd with tar
## Usage: `zstdc <file or directory>`
function zstdc() {
    local file_folder=$1
    local file_folder_name=$(basename "$file_folder")

    # Check if the first argument is not empty
    if [[ -z $file_folder ]]; then
        echoerr "Error: No arguments provided."
        return
    fi

    # Check if zstd is installed
    if ! command -v zstd &> /dev/null; then
        echoerr "Error: zstd not found."
        return
    fi

    # Check if the file or directory exists
    if [[ ! -e $file_folder ]]; then
        echoerr "Error: $file_folder not found."
        return
    fi

    # Compress the file or directory
    tar --use-compress-program="zstd -T0 -19" -cf "${file_folder_name}.tar.zst" "$file_folder"
}

## ::: danger Requirements
## This function requires `zstd`. Install it from `sudo apt install zstd`.
## :::
## `zstdx` extracts a zstd compressed tar file
## Usage: `zstdx <file.tar.zst>`
function zstdx() {
    local file=$1
    local file_name=$(basename "$file" .tar.zst)

    # Check if the first argument is not empty
    if [[ -z $file ]]; then
        echoerr "Error: No arguments provided."
        return
    fi

    # Check if zstd is installed
    if ! command -v zstd &> /dev/null; then
        echoerr "Error: zstd not found."
        return
    fi

    # Check if the file exists
    if [[ ! -e $file ]]; then
        echoerr "Error: $file not found."
        return
    fi

    local sudo_cmd
    sudo_cmd=$(sudo_if_needed "$file")

    # Extract the file
    $sudo_cmd tar --use-compress-program="zstd -d" -xf "$file"
}

## h2: Git Related Functions

## `gclone` clones a git repository and cd's into it
## Usage: `gclone <git_url>`
function gclone() {
    # Check if git is installed
    if ! command -v git &> /dev/null; then
        echoerr "Error: git not found. Please install git from https://git-scm.com/downloads"
        return
    fi

    # Check if the first argument is not empty
    if [[ -z $1 ]]; then
        echoerr "Error: No arguments provided."
        return
    fi

    # Clone the repository
    git clone "$1" && cd "$(basename "$1" .git)"
}

## `gsubd` removed the current Git submodule and its entry in `.gitmodules`
## Usage: `gsubd <submodule_path>`
function gsubd() {
    # Check if git is installed
    if ! command -v git &> /dev/null; then
        echoerr "Error: git not found. Please install git from https://git-scm.com/downloads"
        return
    fi

    local SUBMODULE_PATH="$1"

    # Check if the first argument is not empty
    if [[ -z $SUBMODULE_PATH ]]; then
        echoerr "Error: No path provided."
        return
    fi

    # Check if the submodule exists
    if [[ ! -e $SUBMODULE_PATH ]]; then
        echoerr "Error: $SUBMODULE_PATH not found."
        return
    fi

    # Remove the submodule entry from .git/config
    git submodule deinit -f "$SUBMODULE_PATH"

    # Remove the submodule from the index and working tree
    git rm -f $SUBMODULE_PATH

    # Clean up the .gitmodules file
    git config -f .gitmodules --remove-section submodule.$SUBMODULE_PATH 2> /dev/null

    # Remove the leftover submodule directory in .git/modules
    rm -rf .git/modules/$SUBMODULE_PATH
}

## `gclean` removes all untracked files, including ignored files and directories
## Usage: `gclean`
function gclean() {
    # Check if git is installed
    if ! command -v git &> /dev/null; then
        echoerr "Error: git not found. Please install git from https://git-scm.com/downloads"
        return
    fi

    # Remove all untracked files, including ignored files and directories
    # Add -n flag to do a dry run
    git clean -Xfd
}

## `gcl` Generates a changelog from the commit history
## Usage: `gcl`
function gcl() {
    # Check if git is installed
    if ! command -v git &> /dev/null; then
        echoerr "Error: git not found. Please install git from https://git-scm.com/downloads"
        return
    fi

    # Check if in master or main branch if so, else warn the user
    local branch
    branch=$(git rev-parse --abbrev-ref HEAD)
    if [[ "$branch" == "main" && "$branch" == "master" ]]; then
        echoerr "Warning: You are in the main or master branch. The changelog will be generated from the current branch."
    fi

    # Get the change log from the main/master branch till HEAD and print it in a bullet list format
    git log --pretty=format:'- %s' "$branch"
}

# =========================================================================================================
# ============================================== Dotfiles =================================================
# =========================================================================================================

## h2: Dotfiles Related Functions

function _dot_help() {
    echo -e "Your friendly dotfiles to make your life easier.\n"
    echo "Usage: dot [command]"
    echo
    echo "Commands:"
    echo "  dotc        Checks if all the requirments are met for the dotfiles to work"
    echo "  dotu        Updates the dotfiles to the latest main branch"
    echo "  dotls       Lists all the aliases and functions in the dotfiles and the shell"
}

## `dot` prints help for the dotfiles and can be used to run the dotfiles functions
## Usage: `dot` or `dot <command>`
function dot() {
    if [[ -z $1 ]]; then
        _dot_help
        return
    fi

    case $1 in
        "c")
            dotc
            ;;
        "u")
            dotu
            ;;
        "ls")
            dotls
            ;;
        *)
            _dot_help
            ;;
    esac
}

## `dotc` checks if all the requirments are met for the dotfiles to work
## Usage: `dotc`
function dotc() {
    script_dir=$(_whereami)

    source $script_dir/install.sh
}

## `dotu` updates the dotfiles to the latest main branch
## Usage: `dotu`
function dotu() {
    current_dir=$(pwd)
    repo_dir=$(_whereami)
    
    # Check if repo directory exists
    if [ ! -d "$repo_dir" ]; then
        echo "Error: Repository directory not found"
        return 1
    fi
    
    cd "$repo_dir" || return 1

    # Check if we're in a git repository
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "Error: Not a git repository"
        cd "$current_dir"
        return 1
    fi

    git fetch -q origin main &
    fetch_pid=$!
    _loading $fetch_pid "Checking for updates..."

    # Get current hash
    current_hash=$(git rev-parse HEAD)
    # Get remote hash
    remote_hash=$(git rev-parse origin/main 2>/dev/null)

    # Check if remote hash retrieval failed
    if [ -z "$remote_hash" ]; then
        _loading --done "Error: Could not fetch remote hash"
        cd "$current_dir"
        return 1
    fi

    # Check if the hash is the same as the remote
    if [[ $remote_hash == $current_hash ]]; then
        _loading --done "Already up to date."
        cd "$current_dir"
    else
        # Pull the latest changes quietly
        if git pull -q origin main &
        pull_pid=$!; then
            _loading $pull_pid "Updates found. Updating now..."
            echo "Checkout the diff at https://github.com/akshaybabloo/dotfiles/compare/$current_hash...$remote_hash"
        else
            _loading --done "Error: Failed to pull updates"
            cd "$current_dir"
            return 1
        fi
    fi

    # Check if updater script exists before running
    if [ -f "$repo_dir/updater.sh" ]; then
        "$repo_dir/updater.sh"
    else
        echo "Warning: updater.sh not found"
    fi

    cd "$current_dir"
    reload
}

## `dotls` lists all the aliases and functions in the dotfiles and the shell
## Usage: `dotls`
function dotls() {
    script_dir=$(_whereami)

    _blueText "Aliases"
    grep -E "^alias" $script_dir/.aliases | sed -E "s/alias //g"

    echo -e "\n"

    _blueText "Functions"
    grep -E "^function" $script_dir/.functions | sed -E "s/function //g"

}
