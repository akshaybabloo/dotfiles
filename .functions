#!/bin/bash

function _whereami() {
    if [[ $0 == -* ]]; then
        if [[ $SHELL == */zsh ]]; then
            script_dir=$(dirname "$ZSH_ARGZERO")
        elif [[ $SHELL == */bash ]]; then
            script_dir=$(dirname "${BASH_SOURCE[0]}")
        else
            echo "Unsupported shell: $SHELL"
            exit 1
        fi
    else
        script_dir=$(dirname "${BASH_SOURCE[0]}")
    fi

    echo $script_dir
}

function _loading() {
    local pid=$1
    local message=$2

    if [[ $1 == "--done" ]]; then
        echo -e "\n$2"
        return
    fi

    # Start the Spinner:
    i=1
    sp="/-\|"
    echo -n "$message "
    while [ -d /proc/"$pid" ]; do
        printf "\b${sp:i++%${#sp}:1}"
        sleep .1
    done

    # Clean up the output:
    echo -e "\b\b Done!"
}

function _redText() { printf "\e[1m\e[31m%s\e[0m\n" "$1"; }
function _greenText() { printf "\e[1m\e[32m%s\e[0m\n" "$1"; }
function _blueText() { printf "\e[1m\e[94m%s\e[0m\n" "$1"; }


## h2: General Functions

## `die` echoes the first argument as an error message and exits the shell
## Usage: `die "Error: Something went wrong."`
function die() { echoerr $@ ; exit 1; }

## Create a new directory and enter it
## Usage: `mkd <dirname>`
function mkd() {
	mkdir -p "$@" && cd "$_"
}

## Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
## Usage: `Usage: targz [--name custom_name] <path to file or directory>...`
function targz() {
    local outputName="compressed_files"
    local files=()

    # Parse arguments
    for arg in "$@"; do
        case "$arg" in
            --name)
                outputNameSet=true
                ;;
            *)
                if [[ "$outputNameSet" == true ]]; then
                    outputName="$arg"
                    outputNameSet=false
                else
                    files+=("$arg")
                fi
                ;;
        esac
    done

    # Check if any files were provided
    if [ ${#files[@]} -eq 0 ]; then
        echo "Usage: targz [--name custom_name] <path to file or directory>..."
        return 1
    fi

    # Check for existing compressed file and increment name if exists
    local tmpFile="${outputName}.tar"
    local counter=0
    while [ -f "${tmpFile}.gz" ]; do
        let counter++
        tmpFile="${outputName}${counter}.tar"
    done

    # Create tar file
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${files[@]}" || return 1

    # Determine compression command
    local cmd=""
    local size=$(stat -c"%s" "${tmpFile}" 2>/dev/null || stat -f"%z" "${tmpFile}" 2>/dev/null)
    if ((size < 52428800)) && command -v zopfli >/dev/null; then
        cmd="zopfli"
    else
        if command -v pigz >/dev/null; then
            cmd="pigz"
        else
            cmd="gzip"
        fi
    fi

    echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…"
    "${cmd}" -v "${tmpFile}" || return 1
    [ -f "${tmpFile}" ] && rm "${tmpFile}"

    local zippedSize=$(stat -c"%s" "${tmpFile}.gz" 2>/dev/null || stat -f"%z" "${tmpFile}.gz" 2>/dev/null)
    echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully."
}

## ::: danger Requirements
## This function requires Python 3.10 or higher.
## :::
## ::: info Optional Requirements
## You can also use Caddy serve, install it from https://caddyserver.com/docs/install
## :::
## > If a caddy server is installed then that is preferred over Python.
##
## Start an HTTP server from a directory, optionally specifying the port
## Usage: `server [path] [port]`
function server() {
    local path="${1:-.}"
    local port="${2:-8000}"
    
    sleep 1 && open "http://localhost:${port}/" &

    # Check if Caddy server is installed
    if command -v caddy &> /dev/null; then
        echo "Starting server at http://localhost:${port}/"
        caddy file-server --browse --listen :$port --root $path
    else
        # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
        # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
        python3 -c $'import http.server;\nclass MyHandler(http.server.SimpleHTTPRequestHandler):\n\tdef guess_type(self, path):\n\t\text = super().guess_type(path);\n\t\tif ext == "application/octet-stream":\n\t\t\text = "text/plain";\n\t\treturn ext + ";charset=UTF-8";\n\nhttp.server.test(HandlerClass=MyHandler, port=int('$port'))'
    fi
}

## Normalize `open` across Linux, macOS, and Windows.
## This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe'
	else
		alias open='xdg-open'
	fi
fi

## `o` with no arguments opens the current directory, otherwise opens the given
## location
## Usage: `o`, `o .`, `o ~/`, `o ./myproject`, etc.
function o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}

## ::: danger Requirements
## This function requires `tree` - `sudo apt install tree`.
## :::
## `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
## the `.git` directory, listing directories first. The output gets piped into
## `less` with options to preserve color and line numbers, unless the output is
## small enough for one screen.
## Usage: `tre <directory>`
function tre() {
	# Check if tree is installed
	if ! command -v tree &>/dev/null; then
		echoerr "Error: tree is not installed. Please install it from - sudo apt install tree"
		return
	fi

	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

## ::: danger Requirements
## This function requires `git` - `sudo apt install git`.
## :::
## `ginit` initailises a git repository and makes an initial commit
## Usage: `ginit` or `ginit "Initial commit"`
function ginit() {
	# Check if git is installed
	if ! command -v git &>/dev/null; then
		echoerr "Error: git not found. Please install git from https://git-scm.com/downloads"
		return
	fi

	local commit_message="${1:-Initial commit}"
	git init && git add . && git commit -m "$commit_message"
}

## `echoerr` echoes the first argument to stderr. Useful for printing errors.
## Usage: `echoerr "Error: Something went wrong."`
function echoerr() { _redText "$*" >&2; }

## `dlc` deletes all lines that start with the specified comment symbol
## Usage: `dlc "<file>" "<comment_symbol>"`
function dlc() {
	local file=$1
	local comment_symbol=$2
	local temp_file="${file}.tmp"

	# Check if the file exists, if not display an error message and return
	if [[ ! -f $file ]]; then
		echoerr "Error: $file not found."
		return
	fi

	# Remove inline comments and full-line comments while preserving necessary newlines
	awk -v symbol="$comment_symbol" '
    {
        line = $0
        if (line ~ "^[[:space:]]*" symbol ".*$") {
            if (prev_line !~ "^[[:space:]]*" symbol ".*$") {
                print ""
            }
        } else {
            sub("[[:space:]]*" symbol ".*", "", line)
            if (length(line) > 0) {
                print line
            } else if (prev_line !~ "^[[:space:]]*" symbol ".*$") {
                print ""
            }
        }
        prev_line = $0
    }
    ' "$file" >"$temp_file"

	# Replace the original file with the temporary file
	mv "$temp_file" "$file"
}

## ::: danger Requirements
## This function requires `7zzs`, see https://www.7-zip.org/download.html
## :::
## `7za` creates a 7Zip archive using the LZMA algorithm
## Usage: `7za <directory>` or `7za <filename1> <filename2> <...> <filenameN> <archive_name>`
function 7za() {
    if ! command -v 7zzs &> /dev/null; then
        echoerr "Error: 7zzs not found. Please install 7zzs from https://www.7-zip.org/download.html"
        return
    fi

    if [[ -z $1 ]]; then    # Check if the first argument is not empty

        echoerr "Error: No arguments provided."
        return
    fi

    if [[ -d $1 ]]; then
        local dir_name=$(basename "$1")
        7zzs a -t7z -m0=lzma -mx9 -mfb=64 -md=32m -ms=on "${dir_name}".7z "$1"
        return
    fi

    # Ensure at least two arguments are provided for files + archive name
    if [[ $# -lt 2 ]]; then
        echoerr "Error: Please provide multiple files and an archive name."
        return
    fi

    7zzs a -t7z -m0=lzma -mx9 -mfb=64 -md=32m -ms=on "${@: -1}".7z "${@:1:$#-1}"
}

## ::: danger Requirements
## This function requires `7zzs`, see https://www.7-zip.org/download.html
## :::
## `7zx` extracts a 7Zip archive to a directory with the same name as the archive
## Usage: `7zx <filename>.7z`
function 7zx() {
    # Check if 7zzs is installed
    if ! command -v 7zzs &> /dev/null; then
        echoerr "Error: 7zzs not found. Please install 7zzs from https://www.7-zip.org/download.html"
        return
    fi

    local file_name="$1"
    local extension="${file_name##*.}"
    local dir_name

    # Determine the directory name based on the file extension
    case "$extension" in
        zip)
            dir_name=$(basename "$file_name" .zip)
            ;;
        rar)
            # Handle multi-part rar, like file.part1.rar
            if [[ "$file_name" =~ \.part[0-9]+\.rar$ ]]; then
                dir_name=$(basename "$file_name" .part1.rar)
            else
                dir_name=$(basename "$file_name" .rar)
            fi
            ;;
        7z)
            # Handle multi-part 7z, like file.part1.7z
            if [[ "$file_name" =~ \.part[0-9]+\.7z$ ]]; then
                dir_name=$(basename "$file_name" .part1.7z)
            else
                dir_name=$(basename "$file_name" .7z)
            fi
            ;;
        *)
            echo "Unsupported file extension: $extension"
            return
            ;;
    esac

    mkdir -p "$dir_name"
    7zzs x "$file_name" -o"$dir_name"
}

## Converts all file names in the current directory to some UUID names leveing the extension intact
## Usage: `uuidf`
function uuidf() {
    # Loop over all files in the current directory
    for file in *; do
        # Skip if it's a directory
        if [[ -d "$file" ]]; then
            continue
        fi

        # Extract the file extension
        extension="${file##*.}"

        # Generate a GUID
        guid=$(uuidgen)

        # Rename the file, keeping the original extension
        mv "$file" "${guid}.${extension}"
    done

}

## `snapc` cleans up old snap versions
## Usage: `sudo snapc`
function snapc() {
    # Check if snap is installed
    if ! command -v snap &> /dev/null; then
        echoerr "Error: snap not found. Please install snap from https://snapcraft.io/docs/installing-snapd"
        return
    fi

    # Check if sudo is used
    if [[ $EUID -ne 0 ]]; then
        echoerr "Error: Please run as root"
        return
    fi

    # Taken from - https://www.debugpoint.com/clean-up-snap/
    # Remove old revisions of snaps
    # CLOSE ALL SNAPS BEFORE RUNNING THIS
    set -eu

    snap list --all | awk '/disabled/{print $1, $3}' |
        while read snapname revision; do
            snap remove "$snapname" --revision="$revision"
        done
}

## h2: Git Related Functions

## `gclone` clones a git repository and cd's into it
## Usage: `gclone <git_url>`
function gclone() {
    # Check if git is installed
    if ! command -v git &> /dev/null; then
        echoerr "Error: git not found. Please install git from https://git-scm.com/downloads"
        return
    fi

    # Check if the first argument is not empty
    if [[ -z $1 ]]; then
        echoerr "Error: No arguments provided."
        return
    fi

    # Clone the repository
    git clone "$1" && cd "$(basename "$1" .git)"
}

## `gsubd` removed the current Git submodule and its entry in `.gitmodules`
## Usage: `gsubd <submodule_path>`
function gsubd() {
    # Check if git is installed
    if ! command -v git &> /dev/null; then
        echoerr "Error: git not found. Please install git from https://git-scm.com/downloads"
        return
    fi

    local SUBMODULE_PATH="$1"

    # Check if the first argument is not empty
    if [[ -z $SUBMODULE_PATH ]]; then
        echoerr "Error: No path provided."
        return
    fi

    # Check if the submodule exists
    if [[ ! -e $SUBMODULE_PATH ]]; then
        echoerr "Error: $SUBMODULE_PATH not found."
        return
    fi

    # Remove the submodule entry from .git/config
    git submodule deinit -f "$SUBMODULE_PATH"

    # Remove the submodule from the index and working tree
    git rm -f $SUBMODULE_PATH

    # Clean up the .gitmodules file
    git config -f .gitmodules --remove-section submodule.$SUBMODULE_PATH 2> /dev/null

    # Remove the leftover submodule directory in .git/modules
    rm -rf .git/modules/$SUBMODULE_PATH
}

# =========================================================================================================
# ============================================== Dotfiles =================================================
# =========================================================================================================

## h2: Dotfiles Related Functions

function _dot_help() {
    echo -e "Your friendly dotfiles to make your life easier.\n"
    echo "Usage: dot [command]"
    echo
    echo "Commands:"
    echo "  dotc        Checks if all the requirments are met for the dotfiles to work"
    echo "  dotu        Updates the dotfiles to the latest main branch"
    echo "  dotls       Lists all the aliases and functions in the dotfiles and the shell"
}

## `dot` prints help for the dotfiles and can be used to run the dotfiles functions
## Usage: `dot` or `dot <command>`
function dot() {
    if [[ -z $1 ]]; then
        _dot_help
        return
    fi

    case $1 in
        "c")
            dotc
            ;;
        "u")
            dotu
            ;;
        "ls")
            dotls
            ;;
        *)
            _dot_help
            ;;
    esac
}

## `dotc` checks if all the requirments are met for the dotfiles to work
## Usage: `dotc`
function dotc() {
    script_dir=$(_whereami)

    source $script_dir/install.sh
}

## `dotu` updates the dotfiles to the latest main branch
## Usage: `dotu`
function dotu() {
    cd $(_whereami)

    git fetch -q origin main &
    fetch_pid=$!
    _loading $fetch_pid "Checking for updates..."

    # Get current hash
    current_hash=$(git rev-parse HEAD)
    # Get remote hash
    remote_hash=$(git rev-parse origin/main)

    # Check if the hash is the same as the remote
    if [[ $remote_hash == $current_hash ]]; then
        _loading --done "Already up to date."
        return
    fi

    # Pull the latest changes quietly
    git pull -q origin main &
    pull_pid=$!
    _loading $pull_pid "Updates found. Updateing now..."
    echo "Checkout the diff at https://github.com/akshaybabloo/dotfiles/compare/$current_hash...$remote_hash"
    reload
}

## `dotls` lists all the aliases and functions in the dotfiles and the shell
## Usage: `dotls`
function dotls() {
    script_dir=$(_whereami)

    _blueText "Aliases"
    grep -E "^alias" $script_dir/.aliases | sed -E "s/alias //g"

    _blueText "Functions"
    grep -E "^function" $script_dir/.functions | sed -E "s/function //g"

    _blueText "Shell"
    grep -E "^function" $script_dir/.shell | sed -E "s/function //g"
}
