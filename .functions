#!/bin/bash

## Create a new directory and enter it
## Usage: `mkd <dirname>`
function mkd() {
	mkdir -p "$@" && cd "$_"
}

## Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
## Usage: `targz <filename> <...source>`
function targz() {
	local tmpFile="${@%/}.tar"
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

	size=$(
		stat -f"%z" "${tmpFile}" 2>/dev/null # macOS `stat`
		stat -c"%s" "${tmpFile}" 2>/dev/null # GNU `stat`
	)

	local cmd=""
	if ((size < 52428800)) && hash zopfli 2>/dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli"
	else
		if hash pigz 2>/dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…"
	"${cmd}" -v "${tmpFile}" || return 1
	[ -f "${tmpFile}" ] && rm "${tmpFile}"

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2>/dev/null # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2>/dev/null # GNU `stat`
	)

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully."
}

## Determine size of a file or total size of a directory
## Usage: `fs <file|directory>`
function fs() {
	if du -b /dev/null >/dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* ./*
	fi
}

## ::: info Requirements
## This function requires Python 3.10 or higher.
## :::
## Start an HTTP server from a directory, optionally specifying the port
## Usage: `server [port] [path]`
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

## Normalize `open` across Linux, macOS, and Windows.
## This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe'
	else
		alias open='xdg-open'
	fi
fi

## `o` with no arguments opens the current directory, otherwise opens the given
## location
## Usage: `o`, `o .`, `o ~/`, `o ./myproject`, etc.
function o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}

## ::: info Requirements
## This function requires `tree` - `sudo apt install tree`.
## :::
## `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
## the `.git` directory, listing directories first. The output gets piped into
## `less` with options to preserve color and line numbers, unless the output is
## small enough for one screen.
## Usage: `tre <directory>`
function tre() {
	# Check if tree is installed
	if ! command -v tree &>/dev/null; then
		echoerr "Error: tree is not installed. Please install it from - sudo apt install tree"
		return
	fi

	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

## ::: info Requirements
## This function requires `git` - `sudo apt install git`.
## :::
## `ginit` initailises a git repository and makes an initial commit
## Usage: `ginit` or `ginit "Initial commit"`
function ginit() {
	# Check if git is installed
	if ! command -v git &>/dev/null; then
		echoerr "Error: git not found. Please install git from https://git-scm.com/downloads"
		return
	fi

	local commit_message="${1:-Initial commit}"
	git init && git add . && git commit -m "$commit_message"
}

## `echoerr` echoes the first argument to stderr. Useful for printing errors.
## Usage: `echoerr "Error: Something went wrong."`
function echoerr() { printf "%s\n" "$*" >&2; }

## `dlc` deletes all lines that start with the specified comment symbol
## Usage: `dlc "<file>" "<comment_symbol>"`
function dlc() {
	local file=$1
	local comment_symbol=$2
	local temp_file="${file}.tmp"

	# Check if the file exists, if not display an error message and return
	if [[ ! -f $file ]]; then
		echo "Error: $file not found."
		return
	fi

	# Remove inline comments and full-line comments while preserving necessary newlines
	awk -v symbol="$comment_symbol" '
    {
        line = $0
        if (line ~ "^[[:space:]]*" symbol ".*$") {
            if (prev_line !~ "^[[:space:]]*" symbol ".*$") {
                print ""
            }
        } else {
            sub("[[:space:]]*" symbol ".*", "", line)
            if (length(line) > 0) {
                print line
            } else if (prev_line !~ "^[[:space:]]*" symbol ".*$") {
                print ""
            }
        }
        prev_line = $0
    }
    ' "$file" >"$temp_file"

	# Replace the original file with the temporary file
	mv "$temp_file" "$file"
}

## ::: info Requirements
## This function requires `7zzs`, see https://www.7-zip.org/download.html
## :::
## `7za` creates a 7Zip archive using the LZMA algorithm
## Usage: `7za <directory>` or `7za <filename1> <filename2> <...> <filenameN> <archive_name>`
function 7za() {
    if ! command -v 7zzs &> /dev/null; then
        echoerr "Error: 7zzs not found. Please install 7zzs from https://www.7-zip.org/download.html"
        return
    fi

    if [[ -z $1 ]]; then    # Check if the first argument is not empty

        echoerr "Error: No arguments provided."
        return
    fi

    if [[ -d $1 ]]; then
        local dir_name=$(basename "$1")
        7zzs a -t7z -m0=lzma -mx9 -mfb=64 -md=32m -ms=on "${dir_name}".7z "$1"
        return
    fi

    # Ensure at least two arguments are provided for files + archive name
    if [[ $# -lt 2 ]]; then
        echoerr "Error: Please provide multiple files and an archive name."
        return
    fi

    7zzs a -t7z -m0=lzma -mx9 -mfb=64 -md=32m -ms=on "${@: -1}".7z "${@:1:$#-1}"
}

## ::: info Requirements
## This function requires `7zzs`, see https://www.7-zip.org/download.html
## :::
## `7zx` extracts a 7Zip archive to a directory with the same name as the archive
## Usage: `7zx <filename>.7z`
function 7zx() {
    # Check if 7zzs is installed
    if ! command -v 7zzs &> /dev/null; then
        echoerr "Error: 7zzs not found. Please install 7zzs from https://www.7-zip.org/download.html"
        return
    fi

    # # Check if the first argument is not empty and is a .7z file
    # if [[ -z $1 || "${1##*.}" != "7z" ]]; then
    #     echoerr "Error: Please provide a valid .7z file as an argument."
    #     return
    # fi

    # Extract the name without the .7z extension
    local dir_name=$(basename "$1" .7z)
    
    mkdir -p "$dir_name"
    
    7zzs x "$1" -o"$dir_name"
}

